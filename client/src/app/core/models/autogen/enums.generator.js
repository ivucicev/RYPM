//*** AUTOGENERATES ENUMS FROM exercise-templates.json (project root) ***
//*** RUN USING: `node enums.generator.js` ***

const fs = require('fs');
const path = require('path');

const projectRootPath = 'data-import/exercises.json';

const relativeExercisesPath = `../../../../../../${projectRootPath}`
const relativeOutputPath = './enums.ts';

// Read exercises.json
const exercisesPath = path.join(__dirname, relativeExercisesPath);
const exercises = JSON.parse(fs.readFileSync(exercisesPath, 'utf8'));

// Convert string to PascalCase for enum keys
const toPascalCase = (str) => {
    return str
        .replace(/[-_\s]+/g, ' ')
        .replace(/\b\w/g, l => l.toUpperCase())
        .replace(/\s+/g, '')
        .replace(/[^a-zA-Z0-9]/g, '');
};

// Extract unique values using Map to prevent duplicates
const extractUniqueValues = (exercises, field) => {
    const uniqueMap = new Map();

    exercises.forEach(exercise => {
        const value = exercise[field];
        if (value && typeof value === 'string') {
            const normalized = value.replace(/\s+/g, '').replace(/-/g, '').toLowerCase();

            // Use normalized value as key to prevent duplicates
            if (!uniqueMap.has(normalized)) {
                uniqueMap.set(normalized, {
                    original: value,
                    normalized: normalized,
                    enumKey: toPascalCase(value)
                });
            }
        }
    });

    // Sort by original value
    return Array.from(uniqueMap.values()).sort((a, b) => a.original.localeCompare(b.original));
};

// Extract muscle types with duplicate prevention
const extractMuscleTypes = (exercises) => {
    const uniqueMap = new Map();

    exercises.forEach(exercise => {
        const allMuscles = [
            ...(exercise.primaryMuscles || []),
            ...(exercise.secondaryMuscles || [])
        ];

        allMuscles.forEach(muscle => {
            if (muscle) {
                const normalized = muscle.toLowerCase().replace(/\s+/g, '');

                // Use normalized value as key to prevent duplicates
                if (!uniqueMap.has(normalized)) {
                    uniqueMap.set(normalized, {
                        original: muscle,
                        normalized: normalized,
                        enumKey: toPascalCase(muscle)
                    });
                }
            }
        });
    });

    return Array.from(uniqueMap.values()).sort((a, b) => a.original.localeCompare(b.original));
};

// Extract all types
const equipmentTypes = extractUniqueValues(exercises, 'equipment');
const levelTypes = extractUniqueValues(exercises, 'level');
const categoryTypes = extractUniqueValues(exercises, 'category');
const forceTypes = extractUniqueValues(exercises, 'force');
const mechanicTypes = extractUniqueValues(exercises, 'mechanic');
const muscleTypes = extractMuscleTypes(exercises);

// Generate TypeScript enum - clean format
const generateEnum = (name, values) => {
    const lines = [`export enum ${name} {`];
    values.forEach(value => {
        lines.push(`  ${value.enumKey} = '${value.normalized}',`);
    });
    lines.push('}');
    return lines.join('\n');
};

// Generate only the enums
const enums = [
    generateEnum('Equipment', equipmentTypes),
    generateEnum('Level', levelTypes),
    generateEnum('Category', categoryTypes),
    generateEnum('Force', forceTypes),
    generateEnum('Mechanic', mechanicTypes),
    generateEnum('Muscle', muscleTypes)
];

// Create clean types file with only enums
const typesContent = `
//*** DO NOT MODIFY - CODE IS AUTOGENERATED AND IT WILL BE OVERWRITTEN ***

${enums.join('\n\n')}
`;

// Write types file
const outputPath = path.join(__dirname, relativeOutputPath);
fs.mkdirSync(path.dirname(outputPath), { recursive: true });
fs.writeFileSync(outputPath, typesContent);

console.log('Generated exercise enums at:', outputPath);
console.log('\nSummary:');
console.log(`- Equipment types: ${equipmentTypes.length}`);
console.log(`- Level types: ${levelTypes.length}`);
console.log(`- Category types: ${categoryTypes.length}`);
console.log(`- Force types: ${forceTypes.length}`);
console.log(`- Mechanic types: ${mechanicTypes.length}`);
console.log(`- Muscle types: ${muscleTypes.length}`);

// Preview the generated content
console.log('\nGenerated enums preview:');
console.log(typesContent);
